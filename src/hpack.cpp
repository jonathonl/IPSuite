
#include <cmath>
#include <assert.h>
#include <iostream>

#include "hpack.hpp"

namespace std
{
  template <>
  struct hash<std::pair<std::string,std::string>>
  {
    std::size_t operator()(const std::pair<std::string,std::string>& k) const
    {
      // Compute individual hash values for first,
      // second and third and combine them using XOR
      // and bit shifting:

      return ((std::hash<std::string>()(k.first) ^ (std::hash<std::string>()(k.second) << 1)) >> 1);
    }
  };

}

namespace manifold
{
  namespace hpack
  {
    //----------------------------------------------------------------//
    const std::array<std::pair<std::string,std::string>, 61> static_table{{
      /* 1  */    {":authority"                  , ""             },
      /* 2  */    {":method"                     , "GET"          },
      /* 3  */    {":method"                     , "POST"         },
      /* 4  */    {":path"                       , "/"            },
      /* 5  */    {":path"                       , "/index.html"  },
      /* 6  */    {":scheme"                     , "http"         },
      /* 7  */    {":scheme"                     , "https"        },
      /* 8  */    {":status"                     , "200"          },
      /* 9  */    {":status"                     , "204"          },
      /* 10 */    {":status"                     , "206"          },
      /* 11 */    {":status"                     , "304"          },
      /* 12 */    {":status"                     , "400"          },
      /* 13 */    {":status"                     , "404"          },
      /* 14 */    {":status"                     , "500"          },
      /* 15 */    {"accept-charset"              , ""             },
      /* 16 */    {"accept-encoding"             , "gzip, deflate"},
      /* 17 */    {"accept-language"             , ""             },
      /* 18 */    {"accept-ranges"               , ""             },
      /* 19 */    {"accept"                      , ""             },
      /* 20 */    {"access-control-allow-origin" , ""             },
      /* 21 */    {"age"                         , ""             },
      /* 22 */    {"allow"                       , ""             },
      /* 23 */    {"authorization"               , ""             },
      /* 24 */    {"cache-control"               , ""             },
      /* 25 */    {"content-disposition"         , ""             },
      /* 26 */    {"content-encoding"            , ""             },
      /* 27 */    {"content-language"            , ""             },
      /* 28 */    {"content-length"              , ""             },
      /* 29 */    {"content-location"            , ""             },
      /* 30 */    {"content-range"               , ""             },
      /* 31 */    {"content-type"                , ""             },
      /* 32 */    {"cookie"                      , ""             },
      /* 33 */    {"date"                        , ""             },
      /* 34 */    {"etag"                        , ""             },
      /* 35 */    {"expect"                      , ""             },
      /* 36 */    {"expires"                     , ""             },
      /* 37 */    {"from"                        , ""             },
      /* 38 */    {"host"                        , ""             },
      /* 39 */    {"if-match"                    , ""             },
      /* 40 */    {"if-modified-since"           , ""             },
      /* 41 */    {"if-none-match"               , ""             },
      /* 42 */    {"if-range"                    , ""             },
      /* 43 */    {"if-unmodified-since"         , ""             },
      /* 44 */    {"last-modified"               , ""             },
      /* 45 */    {"link"                        , ""             },
      /* 46 */    {"location"                    , ""             },
      /* 47 */    {"max-forwards"                , ""             },
      /* 48 */    {"proxy-authenticate"          , ""             },
      /* 49 */    {"proxy-authorization"         , ""             },
      /* 50 */    {"range"                       , ""             },
      /* 51 */    {"referer"                     , ""             },
      /* 52 */    {"refresh"                     , ""             },
      /* 53 */    {"retry-after"                 , ""             },
      /* 54 */    {"server"                      , ""             },
      /* 55 */    {"set-cookie"                  , ""             },
      /* 56 */    {"strict-transport-security"   , ""             },
      /* 57 */    {"transfer-encoding"           , ""             },
      /* 58 */    {"user-agent"                  , ""             },
      /* 59 */    {"vary"                        , ""             },
      /* 60 */    {"via"                         , ""             },
      /* 61 */    {"www-authenticate"            , ""             }}};
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    const std::unordered_multimap<std::string, std::size_t> static_table_reverse_lookup_map{
      {":authority"                  ,  1 },  // ""
      {":method"                     ,  2 },  // "GET"
      {":method"                     ,  3 },  // "POST"
      {":path"                       ,  4 },  // "/"
      {":path"                       ,  5 },  // "/index.html"
      {":scheme"                     ,  6 },  // "http"
      {":scheme"                     ,  7 },  // "https"
      {":status"                     ,  8 },  // "200"
      {":status"                     ,  9 },  // "204"
      {":status"                     ,  10},  // "206"
      {":status"                     ,  11},  // "304"
      {":status"                     ,  12},  // "400"
      {":status"                     ,  13},  // "404"
      {":status"                     ,  14},  // "500"
      {"accept-charset"              ,  15},  // ""
      {"accept-encoding"             ,  16},  // "gzip, deflate"
      {"accept-language"             ,  17},  // ""
      {"accept-ranges"               ,  18},  // ""
      {"accept"                      ,  19},  // ""
      {"access-control-allow-origin" ,  20},  // ""
      {"age"                         ,  21},  // ""
      {"allow"                       ,  22},  // ""
      {"authorization"               ,  23},  // ""
      {"cache-control"               ,  24},  // ""
      {"content-disposition"         ,  25},  // ""
      {"content-encoding"            ,  26},  // ""
      {"content-language"            ,  27},  // ""
      {"content-length"              ,  28},  // ""
      {"content-location"            ,  29},  // ""
      {"content-range"               ,  30},  // ""
      {"content-type"                ,  31},  // ""
      {"cookie"                      ,  32},  // ""
      {"date"                        ,  33},  // ""
      {"etag"                        ,  34},  // ""
      {"expect"                      ,  35},  // ""
      {"expires"                     ,  36},  // ""
      {"from"                        ,  37},  // ""
      {"host"                        ,  38},  // ""
      {"if-match"                    ,  39},  // ""
      {"if-modified-since"           ,  40},  // ""
      {"if-none-match"               ,  41},  // ""
      {"if-range"                    ,  42},  // ""
      {"if-unmodified-since"         ,  43},  // ""
      {"last-modified"               ,  44},  // ""
      {"link"                        ,  45},  // ""
      {"location"                    ,  46},  // ""
      {"max-forwards"                ,  47},  // ""
      {"proxy-authenticate"          ,  48},  // ""
      {"proxy-authorization"         ,  49},  // ""
      {"range"                       ,  50},  // ""
      {"referer"                     ,  51},  // ""
      {"refresh"                     ,  52},  // ""
      {"retry-after"                 ,  53},  // ""
      {"server"                      ,  54},  // ""
      {"set-cookie"                  ,  55},  // ""
      {"strict-transport-security"   ,  56},  // ""
      {"transfer-encoding"           ,  57},  // ""
      {"user-agent"                  ,  58},  // ""
      {"vary"                        ,  59},  // ""
      {"via"                         ,  60},  // ""
      {"www-authenticate"            ,  61}}; // ""
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    const std::map<huffman_code,char,huffman_code_cmp> huffman_code_tree{
    /*     (  0)  |11111111|11000                    */    { {     0x1ff8 << (32 - 13), 13}, (char)  0 },
    /*     (  1)  |11111111|11111111|1011000         */    { {   0x7fffd8 << (32 - 23), 23}, (char)  1 },
    /*     (  2)  |11111111|11111111|11111110|0010   */    { {  0xfffffe2 << (32 - 28), 28}, (char)  2 },
    /*     (  3)  |11111111|11111111|11111110|0011   */    { {  0xfffffe3 << (32 - 28), 28}, (char)  3 },
    /*     (  4)  |11111111|11111111|11111110|0100   */    { {  0xfffffe4 << (32 - 28), 28}, (char)  4 },
    /*     (  5)  |11111111|11111111|11111110|0101   */    { {  0xfffffe5 << (32 - 28), 28}, (char)  5 },
    /*     (  6)  |11111111|11111111|11111110|0110   */    { {  0xfffffe6 << (32 - 28), 28}, (char)  6 },
    /*     (  7)  |11111111|11111111|11111110|0111   */    { {  0xfffffe7 << (32 - 28), 28}, (char)  7 },
    /*     (  8)  |11111111|11111111|11111110|1000   */    { {  0xfffffe8 << (32 - 28), 28}, (char)  8 },
    /*     (  9)  |11111111|11111111|11101010        */    { {   0xffffea << (32 - 24), 24}, (char)  9 },
    /*     ( 10)  |11111111|11111111|11111111|111100 */    { { 0x3ffffffc << (32 - 30), 30}, (char) 10 },
    /*     ( 11)  |11111111|11111111|11111110|1001   */    { {  0xfffffe9 << (32 - 28), 28}, (char) 11 },
    /*     ( 12)  |11111111|11111111|11111110|1010   */    { {  0xfffffea << (32 - 28), 28}, (char) 12 },
    /*     ( 13)  |11111111|11111111|11111111|111101 */    { { 0x3ffffffd << (32 - 30), 30}, (char) 13 },
    /*     ( 14)  |11111111|11111111|11111110|1011   */    { {  0xfffffeb << (32 - 28), 28}, (char) 14 },
    /*     ( 15)  |11111111|11111111|11111110|1100   */    { {  0xfffffec << (32 - 28), 28}, (char) 15 },
    /*     ( 16)  |11111111|11111111|11111110|1101   */    { {  0xfffffed << (32 - 28), 28}, (char) 16 },
    /*     ( 17)  |11111111|11111111|11111110|1110   */    { {  0xfffffee << (32 - 28), 28}, (char) 17 },
    /*     ( 18)  |11111111|11111111|11111110|1111   */    { {  0xfffffef << (32 - 28), 28}, (char) 18 },
    /*     ( 19)  |11111111|11111111|11111111|0000   */    { {  0xffffff0 << (32 - 28), 28}, (char) 19 },
    /*     ( 20)  |11111111|11111111|11111111|0001   */    { {  0xffffff1 << (32 - 28), 28}, (char) 20 },
    /*     ( 21)  |11111111|11111111|11111111|0010   */    { {  0xffffff2 << (32 - 28), 28}, (char) 21 },
    /*     ( 22)  |11111111|11111111|11111111|111110 */    { { 0x3ffffffe << (32 - 30), 30}, (char) 22 },
    /*     ( 23)  |11111111|11111111|11111111|0011   */    { {  0xffffff3 << (32 - 28), 28}, (char) 23 },
    /*     ( 24)  |11111111|11111111|11111111|0100   */    { {  0xffffff4 << (32 - 28), 28}, (char) 24 },
    /*     ( 25)  |11111111|11111111|11111111|0101   */    { {  0xffffff5 << (32 - 28), 28}, (char) 25 },
    /*     ( 26)  |11111111|11111111|11111111|0110   */    { {  0xffffff6 << (32 - 28), 28}, (char) 26 },
    /*     ( 27)  |11111111|11111111|11111111|0111   */    { {  0xffffff7 << (32 - 28), 28}, (char) 27 },
    /*     ( 28)  |11111111|11111111|11111111|1000   */    { {  0xffffff8 << (32 - 28), 28}, (char) 28 },
    /*     ( 29)  |11111111|11111111|11111111|1001   */    { {  0xffffff9 << (32 - 28), 28}, (char) 29 },
    /*     ( 30)  |11111111|11111111|11111111|1010   */    { {  0xffffffa << (32 - 28), 28}, (char) 30 },
    /*     ( 31)  |11111111|11111111|11111111|1011   */    { {  0xffffffb << (32 - 28), 28}, (char) 31 },
    /* ' ' ( 32)  |010100                            */    { {       0x14 << (32 -  6),  6}, (char) 32 },
    /* '!' ( 33)  |11111110|00                       */    { {      0x3f8 << (32 - 10), 10}, (char) 33 },
    /* '"' ( 34)  |11111110|01                       */    { {      0x3f9 << (32 - 10), 10}, (char) 34 },
    /* '#' ( 35)  |11111111|1010                     */    { {      0xffa << (32 - 12), 12}, (char) 35 },
    /* '$' ( 36)  |11111111|11001                    */    { {     0x1ff9 << (32 - 13), 13}, (char) 36 },
    /* '%' ( 37)  |010101                            */    { {       0x15 << (32 -  6),  6}, (char) 37 },
    /* '&' ( 38)  |11111000                          */    { {       0xf8 << (32 -  8),  8}, (char) 38 },
    /* ''' ( 39)  |11111111|010                      */    { {      0x7fa << (32 - 11), 11}, (char) 39 },
    /* '(' ( 40)  |11111110|10                       */    { {      0x3fa << (32 - 10), 10}, (char) 40 },
    /* ')' ( 41)  |11111110|11                       */    { {      0x3fb << (32 - 10), 10}, (char) 41 },
    /* '*' ( 42)  |11111001                          */    { {       0xf9 << (32 -  8),  8}, (char) 42 },
    /* '+' ( 43)  |11111111|011                      */    { {      0x7fb << (32 - 11), 11}, (char) 43 },
    /* ',' ( 44)  |11111010                          */    { {       0xfa << (32 -  8),  8}, (char) 44 },
    /* '-' ( 45)  |010110                            */    { {       0x16 << (32 -  6),  6}, (char) 45 },
    /* '.' ( 46)  |010111                            */    { {       0x17 << (32 -  6),  6}, (char) 46 },
    /* '/' ( 47)  |011000                            */    { {       0x18 << (32 -  6),  6}, (char) 47 },
    /* '0' ( 48)  |00000                             */    { {        0x0 << (32 -  5),  5}, (char) 48 },
    /* '1' ( 49)  |00001                             */    { {        0x1 << (32 -  5),  5}, (char) 49 },
    /* '2' ( 50)  |00010                             */    { {        0x2 << (32 -  5),  5}, (char) 50 },
    /* '3' ( 51)  |011001                            */    { {       0x19 << (32 -  6),  6}, (char) 51 },
    /* '4' ( 52)  |011010                            */    { {       0x1a << (32 -  6),  6}, (char) 52 },
    /* '5' ( 53)  |011011                            */    { {       0x1b << (32 -  6),  6}, (char) 53 },
    /* '6' ( 54)  |011100                            */    { {       0x1c << (32 -  6),  6}, (char) 54 },
    /* '7' ( 55)  |011101                            */    { {       0x1d << (32 -  6),  6}, (char) 55 },
    /* '8' ( 56)  |011110                            */    { {       0x1e << (32 -  6),  6}, (char) 56 },
    /* '9' ( 57)  |011111                            */    { {       0x1f << (32 -  6),  6}, (char) 57 },
    /* ':' ( 58)  |1011100                           */    { {       0x5c << (32 -  7),  7}, (char) 58 },
    /* ';' ( 59)  |11111011                          */    { {       0xfb << (32 -  8),  8}, (char) 59 },
    /* '<' ( 60)  |11111111|1111100                  */    { {     0x7ffc << (32 - 15), 15}, (char) 60 },
    /* '=' ( 61)  |100000                            */    { {       0x20 << (32 -  6),  6}, (char) 61 },
    /* '>' ( 62)  |11111111|1011                     */    { {      0xffb << (32 - 12), 12}, (char) 62 },
    /* '?' ( 63)  |11111111|00                       */    { {      0x3fc << (32 - 10), 10}, (char) 63 },
    /* '@' ( 64)  |11111111|11010                    */    { {     0x1ffa << (32 - 13), 13}, (char) 64 },
    /* 'A' ( 65)  |100001                            */    { {       0x21 << (32 -  6),  6}, (char) 65 },
    /* 'B' ( 66)  |1011101                           */    { {       0x5d << (32 -  7),  7}, (char) 66 },
    /* 'C' ( 67)  |1011110                           */    { {       0x5e << (32 -  7),  7}, (char) 67 },
    /* 'D' ( 68)  |1011111                           */    { {       0x5f << (32 -  7),  7}, (char) 68 },
    /* 'E' ( 69)  |1100000                           */    { {       0x60 << (32 -  7),  7}, (char) 69 },
    /* 'F' ( 70)  |1100001                           */    { {       0x61 << (32 -  7),  7}, (char) 70 },
    /* 'G' ( 71)  |1100010                           */    { {       0x62 << (32 -  7),  7}, (char) 71 },
    /* 'H' ( 72)  |1100011                           */    { {       0x63 << (32 -  7),  7}, (char) 72 },
    /* 'I' ( 73)  |1100100                           */    { {       0x64 << (32 -  7),  7}, (char) 73 },
    /* 'J' ( 74)  |1100101                           */    { {       0x65 << (32 -  7),  7}, (char) 74 },
    /* 'K' ( 75)  |1100110                           */    { {       0x66 << (32 -  7),  7}, (char) 75 },
    /* 'L' ( 76)  |1100111                           */    { {       0x67 << (32 -  7),  7}, (char) 76 },
    /* 'M' ( 77)  |1101000                           */    { {       0x68 << (32 -  7),  7}, (char) 77 },
    /* 'N' ( 78)  |1101001                           */    { {       0x69 << (32 -  7),  7}, (char) 78 },
    /* 'O' ( 79)  |1101010                           */    { {       0x6a << (32 -  7),  7}, (char) 79 },
    /* 'P' ( 80)  |1101011                           */    { {       0x6b << (32 -  7),  7}, (char) 80 },
    /* 'Q' ( 81)  |1101100                           */    { {       0x6c << (32 -  7),  7}, (char) 81 },
    /* 'R' ( 82)  |1101101                           */    { {       0x6d << (32 -  7),  7}, (char) 82 },
    /* 'S' ( 83)  |1101110                           */    { {       0x6e << (32 -  7),  7}, (char) 83 },
    /* 'T' ( 84)  |1101111                           */    { {       0x6f << (32 -  7),  7}, (char) 84 },
    /* 'U' ( 85)  |1110000                           */    { {       0x70 << (32 -  7),  7}, (char) 85 },
    /* 'V' ( 86)  |1110001                           */    { {       0x71 << (32 -  7),  7}, (char) 86 },
    /* 'W' ( 87)  |1110010                           */    { {       0x72 << (32 -  7),  7}, (char) 87 },
    /* 'X' ( 88)  |11111100                          */    { {       0xfc << (32 -  8),  8}, (char) 88 },
    /* 'Y' ( 89)  |1110011                           */    { {       0x73 << (32 -  7),  7}, (char) 89 },
    /* 'Z' ( 90)  |11111101                          */    { {       0xfd << (32 -  8),  8}, (char) 90 },
    /* '[' ( 91)  |11111111|11011                    */    { {     0x1ffb << (32 - 13), 13}, (char) 91 },
    /* '\' ( 92)  |11111111|11111110|000             */    { {    0x7fff0 << (32 - 19), 19}, (char) 92 },
    /* ']' ( 93)  |11111111|11100                    */    { {     0x1ffc << (32 - 13), 13}, (char) 93 },
    /* '^' ( 94)  |11111111|111100                   */    { {     0x3ffc << (32 - 14), 14}, (char) 94 },
    /* '_' ( 95)  |100010                            */    { {       0x22 << (32 -  6),  6}, (char) 95 },
    /* '`' ( 96)  |11111111|1111101                  */    { {     0x7ffd << (32 - 15), 15}, (char) 96 },
    /* 'a' ( 97)  |00011                             */    { {        0x3 << (32 -  5),  5}, (char) 97 },
    /* 'b' ( 98)  |100011                            */    { {       0x23 << (32 -  6),  6}, (char) 98 },
    /* 'c' ( 99)  |00100                             */    { {        0x4 << (32 -  5),  5}, (char) 99 },
    /* 'd' (100)  |100100                            */    { {       0x24 << (32 -  6),  6}, (char)100 },
    /* 'e' (101)  |00101                             */    { {        0x5 << (32 -  5),  5}, (char)101 },
    /* 'f' (102)  |100101                            */    { {       0x25 << (32 -  6),  6}, (char)102 },
    /* 'g' (103)  |100110                            */    { {       0x26 << (32 -  6),  6}, (char)103 },
    /* 'h' (104)  |100111                            */    { {       0x27 << (32 -  6),  6}, (char)104 },
    /* 'i' (105)  |00110                             */    { {        0x6 << (32 -  5),  5}, (char)105 },
    /* 'j' (106)  |1110100                           */    { {       0x74 << (32 -  7),  7}, (char)106 },
    /* 'k' (107)  |1110101                           */    { {       0x75 << (32 -  7),  7}, (char)107 },
    /* 'l' (108)  |101000                            */    { {       0x28 << (32 -  6),  6}, (char)108 },
    /* 'm' (109)  |101001                            */    { {       0x29 << (32 -  6),  6}, (char)109 },
    /* 'n' (110)  |101010                            */    { {       0x2a << (32 -  6),  6}, (char)110 },
    /* 'o' (111)  |00111                             */    { {        0x7 << (32 -  5),  5}, (char)111 },
    /* 'p' (112)  |101011                            */    { {       0x2b << (32 -  6),  6}, (char)112 },
    /* 'q' (113)  |1110110                           */    { {       0x76 << (32 -  7),  7}, (char)113 },
    /* 'r' (114)  |101100                            */    { {       0x2c << (32 -  6),  6}, (char)114 },
    /* 's' (115)  |01000                             */    { {        0x8 << (32 -  5),  5}, (char)115 },
    /* 't' (116)  |01001                             */    { {        0x9 << (32 -  5),  5}, (char)116 },
    /* 'u' (117)  |101101                            */    { {       0x2d << (32 -  6),  6}, (char)117 },
    /* 'v' (118)  |1110111                           */    { {       0x77 << (32 -  7),  7}, (char)118 },
    /* 'w' (119)  |1111000                           */    { {       0x78 << (32 -  7),  7}, (char)119 },
    /* 'x' (120)  |1111001                           */    { {       0x79 << (32 -  7),  7}, (char)120 },
    /* 'y' (121)  |1111010                           */    { {       0x7a << (32 -  7),  7}, (char)121 },
    /* 'z' (122)  |1111011                           */    { {       0x7b << (32 -  7),  7}, (char)122 },
    /* '{' (123)  |11111111|1111110                  */    { {     0x7ffe << (32 - 15), 15}, (char)123 },
    /* '|' (124)  |11111111|100                      */    { {      0x7fc << (32 - 11), 11}, (char)124 },
    /* '}' (125)  |11111111|111101                   */    { {     0x3ffd << (32 - 14), 14}, (char)125 },
    /* '~' (126)  |11111111|11101                    */    { {     0x1ffd << (32 - 13), 13}, (char)126 },
    /*     (127)  |11111111|11111111|11111111|1100   */    { {  0xffffffc << (32 - 28), 28}, (char)127 },
    /*     (128)  |11111111|11111110|0110            */    { {    0xfffe6 << (32 - 20), 20}, (char)128 },
    /*     (129)  |11111111|11111111|010010          */    { {   0x3fffd2 << (32 - 22), 22}, (char)129 },
    /*     (130)  |11111111|11111110|0111            */    { {    0xfffe7 << (32 - 20), 20}, (char)130 },
    /*     (131)  |11111111|11111110|1000            */    { {    0xfffe8 << (32 - 20), 20}, (char)131 },
    /*     (132)  |11111111|11111111|010011          */    { {   0x3fffd3 << (32 - 22), 22}, (char)132 },
    /*     (133)  |11111111|11111111|010100          */    { {   0x3fffd4 << (32 - 22), 22}, (char)133 },
    /*     (134)  |11111111|11111111|010101          */    { {   0x3fffd5 << (32 - 22), 22}, (char)134 },
    /*     (135)  |11111111|11111111|1011001         */    { {   0x7fffd9 << (32 - 23), 23}, (char)135 },
    /*     (136)  |11111111|11111111|010110          */    { {   0x3fffd6 << (32 - 22), 22}, (char)136 },
    /*     (137)  |11111111|11111111|1011010         */    { {   0x7fffda << (32 - 23), 23}, (char)137 },
    /*     (138)  |11111111|11111111|1011011         */    { {   0x7fffdb << (32 - 23), 23}, (char)138 },
    /*     (139)  |11111111|11111111|1011100         */    { {   0x7fffdc << (32 - 23), 23}, (char)139 },
    /*     (140)  |11111111|11111111|1011101         */    { {   0x7fffdd << (32 - 23), 23}, (char)140 },
    /*     (141)  |11111111|11111111|1011110         */    { {   0x7fffde << (32 - 23), 23}, (char)141 },
    /*     (142)  |11111111|11111111|11101011        */    { {   0xffffeb << (32 - 24), 24}, (char)142 },
    /*     (143)  |11111111|11111111|1011111         */    { {   0x7fffdf << (32 - 23), 23}, (char)143 },
    /*     (144)  |11111111|11111111|11101100        */    { {   0xffffec << (32 - 24), 24}, (char)144 },
    /*     (145)  |11111111|11111111|11101101        */    { {   0xffffed << (32 - 24), 24}, (char)145 },
    /*     (146)  |11111111|11111111|010111          */    { {   0x3fffd7 << (32 - 22), 22}, (char)146 },
    /*     (147)  |11111111|11111111|1100000         */    { {   0x7fffe0 << (32 - 23), 23}, (char)147 },
    /*     (148)  |11111111|11111111|11101110        */    { {   0xffffee << (32 - 24), 24}, (char)148 },
    /*     (149)  |11111111|11111111|1100001         */    { {   0x7fffe1 << (32 - 23), 23}, (char)149 },
    /*     (150)  |11111111|11111111|1100010         */    { {   0x7fffe2 << (32 - 23), 23}, (char)150 },
    /*     (151)  |11111111|11111111|1100011         */    { {   0x7fffe3 << (32 - 23), 23}, (char)151 },
    /*     (152)  |11111111|11111111|1100100         */    { {   0x7fffe4 << (32 - 23), 23}, (char)152 },
    /*     (153)  |11111111|11111110|11100           */    { {   0x1fffdc << (32 - 21), 21}, (char)153 },
    /*     (154)  |11111111|11111111|011000          */    { {   0x3fffd8 << (32 - 22), 22}, (char)154 },
    /*     (155)  |11111111|11111111|1100101         */    { {   0x7fffe5 << (32 - 23), 23}, (char)155 },
    /*     (156)  |11111111|11111111|011001          */    { {   0x3fffd9 << (32 - 22), 22}, (char)156 },
    /*     (157)  |11111111|11111111|1100110         */    { {   0x7fffe6 << (32 - 23), 23}, (char)157 },
    /*     (158)  |11111111|11111111|1100111         */    { {   0x7fffe7 << (32 - 23), 23}, (char)158 },
    /*     (159)  |11111111|11111111|11101111        */    { {   0xffffef << (32 - 24), 24}, (char)159 },
    /*     (160)  |11111111|11111111|011010          */    { {   0x3fffda << (32 - 22), 22}, (char)160 },
    /*     (161)  |11111111|11111110|11101           */    { {   0x1fffdd << (32 - 21), 21}, (char)161 },
    /*     (162)  |11111111|11111110|1001            */    { {    0xfffe9 << (32 - 20), 20}, (char)162 },
    /*     (163)  |11111111|11111111|011011          */    { {   0x3fffdb << (32 - 22), 22}, (char)163 },
    /*     (164)  |11111111|11111111|011100          */    { {   0x3fffdc << (32 - 22), 22}, (char)164 },
    /*     (165)  |11111111|11111111|1101000         */    { {   0x7fffe8 << (32 - 23), 23}, (char)165 },
    /*     (166)  |11111111|11111111|1101001         */    { {   0x7fffe9 << (32 - 23), 23}, (char)166 },
    /*     (167)  |11111111|11111110|11110           */    { {   0x1fffde << (32 - 21), 21}, (char)167 },
    /*     (168)  |11111111|11111111|1101010         */    { {   0x7fffea << (32 - 23), 23}, (char)168 },
    /*     (169)  |11111111|11111111|011101          */    { {   0x3fffdd << (32 - 22), 22}, (char)169 },
    /*     (170)  |11111111|11111111|011110          */    { {   0x3fffde << (32 - 22), 22}, (char)170 },
    /*     (171)  |11111111|11111111|11110000        */    { {   0xfffff0 << (32 - 24), 24}, (char)171 },
    /*     (172)  |11111111|11111110|11111           */    { {   0x1fffdf << (32 - 21), 21}, (char)172 },
    /*     (173)  |11111111|11111111|011111          */    { {   0x3fffdf << (32 - 22), 22}, (char)173 },
    /*     (174)  |11111111|11111111|1101011         */    { {   0x7fffeb << (32 - 23), 23}, (char)174 },
    /*     (175)  |11111111|11111111|1101100         */    { {   0x7fffec << (32 - 23), 23}, (char)175 },
    /*     (176)  |11111111|11111111|00000           */    { {   0x1fffe0 << (32 - 21), 21}, (char)176 },
    /*     (177)  |11111111|11111111|00001           */    { {   0x1fffe1 << (32 - 21), 21}, (char)177 },
    /*     (178)  |11111111|11111111|100000          */    { {   0x3fffe0 << (32 - 22), 22}, (char)178 },
    /*     (179)  |11111111|11111111|00010           */    { {   0x1fffe2 << (32 - 21), 21}, (char)179 },
    /*     (180)  |11111111|11111111|1101101         */    { {   0x7fffed << (32 - 23), 23}, (char)180 },
    /*     (181)  |11111111|11111111|100001          */    { {   0x3fffe1 << (32 - 22), 22}, (char)181 },
    /*     (182)  |11111111|11111111|1101110         */    { {   0x7fffee << (32 - 23), 23}, (char)182 },
    /*     (183)  |11111111|11111111|1101111         */    { {   0x7fffef << (32 - 23), 23}, (char)183 },
    /*     (184)  |11111111|11111110|1010            */    { {    0xfffea << (32 - 20), 20}, (char)184 },
    /*     (185)  |11111111|11111111|100010          */    { {   0x3fffe2 << (32 - 22), 22}, (char)185 },
    /*     (186)  |11111111|11111111|100011          */    { {   0x3fffe3 << (32 - 22), 22}, (char)186 },
    /*     (187)  |11111111|11111111|100100          */    { {   0x3fffe4 << (32 - 22), 22}, (char)187 },
    /*     (188)  |11111111|11111111|1110000         */    { {   0x7ffff0 << (32 - 23), 23}, (char)188 },
    /*     (189)  |11111111|11111111|100101          */    { {   0x3fffe5 << (32 - 22), 22}, (char)189 },
    /*     (190)  |11111111|11111111|100110          */    { {   0x3fffe6 << (32 - 22), 22}, (char)190 },
    /*     (191)  |11111111|11111111|1110001         */    { {   0x7ffff1 << (32 - 23), 23}, (char)191 },
    /*     (192)  |11111111|11111111|11111000|00     */    { {  0x3ffffe0 << (32 - 26), 26}, (char)192 },
    /*     (193)  |11111111|11111111|11111000|01     */    { {  0x3ffffe1 << (32 - 26), 26}, (char)193 },
    /*     (194)  |11111111|11111110|1011            */    { {    0xfffeb << (32 - 20), 20}, (char)194 },
    /*     (195)  |11111111|11111110|001             */    { {    0x7fff1 << (32 - 19), 19}, (char)195 },
    /*     (196)  |11111111|11111111|100111          */    { {   0x3fffe7 << (32 - 22), 22}, (char)196 },
    /*     (197)  |11111111|11111111|1110010         */    { {   0x7ffff2 << (32 - 23), 23}, (char)197 },
    /*     (198)  |11111111|11111111|101000          */    { {   0x3fffe8 << (32 - 22), 22}, (char)198 },
    /*     (199)  |11111111|11111111|11110110|0      */    { {  0x1ffffec << (32 - 25), 25}, (char)199 },
    /*     (200)  |11111111|11111111|11111000|10     */    { {  0x3ffffe2 << (32 - 26), 26}, (char)200 },
    /*     (201)  |11111111|11111111|11111000|11     */    { {  0x3ffffe3 << (32 - 26), 26}, (char)201 },
    /*     (202)  |11111111|11111111|11111001|00     */    { {  0x3ffffe4 << (32 - 26), 26}, (char)202 },
    /*     (203)  |11111111|11111111|11111011|110    */    { {  0x7ffffde << (32 - 27), 27}, (char)203 },
    /*     (204)  |11111111|11111111|11111011|111    */    { {  0x7ffffdf << (32 - 27), 27}, (char)204 },
    /*     (205)  |11111111|11111111|11111001|01     */    { {  0x3ffffe5 << (32 - 26), 26}, (char)205 },
    /*     (206)  |11111111|11111111|11110001        */    { {   0xfffff1 << (32 - 24), 24}, (char)206 },
    /*     (207)  |11111111|11111111|11110110|1      */    { {  0x1ffffed << (32 - 25), 25}, (char)207 },
    /*     (208)  |11111111|11111110|010             */    { {    0x7fff2 << (32 - 19), 19}, (char)208 },
    /*     (209)  |11111111|11111111|00011           */    { {   0x1fffe3 << (32 - 21), 21}, (char)209 },
    /*     (210)  |11111111|11111111|11111001|10     */    { {  0x3ffffe6 << (32 - 26), 26}, (char)210 },
    /*     (211)  |11111111|11111111|11111100|000    */    { {  0x7ffffe0 << (32 - 27), 27}, (char)211 },
    /*     (212)  |11111111|11111111|11111100|001    */    { {  0x7ffffe1 << (32 - 27), 27}, (char)212 },
    /*     (213)  |11111111|11111111|11111001|11     */    { {  0x3ffffe7 << (32 - 26), 26}, (char)213 },
    /*     (214)  |11111111|11111111|11111100|010    */    { {  0x7ffffe2 << (32 - 27), 27}, (char)214 },
    /*     (215)  |11111111|11111111|11110010        */    { {   0xfffff2 << (32 - 24), 24}, (char)215 },
    /*     (216)  |11111111|11111111|00100           */    { {   0x1fffe4 << (32 - 21), 21}, (char)216 },
    /*     (217)  |11111111|11111111|00101           */    { {   0x1fffe5 << (32 - 21), 21}, (char)217 },
    /*     (218)  |11111111|11111111|11111010|00     */    { {  0x3ffffe8 << (32 - 26), 26}, (char)218 },
    /*     (219)  |11111111|11111111|11111010|01     */    { {  0x3ffffe9 << (32 - 26), 26}, (char)219 },
    /*     (220)  |11111111|11111111|11111111|1101   */    { {  0xffffffd << (32 - 28), 28}, (char)220 },
    /*     (221)  |11111111|11111111|11111100|011    */    { {  0x7ffffe3 << (32 - 27), 27}, (char)221 },
    /*     (222)  |11111111|11111111|11111100|100    */    { {  0x7ffffe4 << (32 - 27), 27}, (char)222 },
    /*     (223)  |11111111|11111111|11111100|101    */    { {  0x7ffffe5 << (32 - 27), 27}, (char)223 },
    /*     (224)  |11111111|11111110|1100            */    { {    0xfffec << (32 - 20), 20}, (char)224 },
    /*     (225)  |11111111|11111111|11110011        */    { {   0xfffff3 << (32 - 24), 24}, (char)225 },
    /*     (226)  |11111111|11111110|1101            */    { {    0xfffed << (32 - 20), 20}, (char)226 },
    /*     (227)  |11111111|11111111|00110           */    { {   0x1fffe6 << (32 - 21), 21}, (char)227 },
    /*     (228)  |11111111|11111111|101001          */    { {   0x3fffe9 << (32 - 22), 22}, (char)228 },
    /*     (229)  |11111111|11111111|00111           */    { {   0x1fffe7 << (32 - 21), 21}, (char)229 },
    /*     (230)  |11111111|11111111|01000           */    { {   0x1fffe8 << (32 - 21), 21}, (char)230 },
    /*     (231)  |11111111|11111111|1110011         */    { {   0x7ffff3 << (32 - 23), 23}, (char)231 },
    /*     (232)  |11111111|11111111|101010          */    { {   0x3fffea << (32 - 22), 22}, (char)232 },
    /*     (233)  |11111111|11111111|101011          */    { {   0x3fffeb << (32 - 22), 22}, (char)233 },
    /*     (234)  |11111111|11111111|11110111|0      */    { {  0x1ffffee << (32 - 25), 25}, (char)234 },
    /*     (235)  |11111111|11111111|11110111|1      */    { {  0x1ffffef << (32 - 25), 25}, (char)235 },
    /*     (236)  |11111111|11111111|11110100        */    { {   0xfffff4 << (32 - 24), 24}, (char)236 },
    /*     (237)  |11111111|11111111|11110101        */    { {   0xfffff5 << (32 - 24), 24}, (char)237 },
    /*     (238)  |11111111|11111111|11111010|10     */    { {  0x3ffffea << (32 - 26), 26}, (char)238 },
    /*     (239)  |11111111|11111111|1110100         */    { {   0x7ffff4 << (32 - 23), 23}, (char)239 },
    /*     (240)  |11111111|11111111|11111010|11     */    { {  0x3ffffeb << (32 - 26), 26}, (char)240 },
    /*     (241)  |11111111|11111111|11111100|110    */    { {  0x7ffffe6 << (32 - 27), 27}, (char)241 },
    /*     (242)  |11111111|11111111|11111011|00     */    { {  0x3ffffec << (32 - 26), 26}, (char)242 },
    /*     (243)  |11111111|11111111|11111011|01     */    { {  0x3ffffed << (32 - 26), 26}, (char)243 },
    /*     (244)  |11111111|11111111|11111100|111    */    { {  0x7ffffe7 << (32 - 27), 27}, (char)244 },
    /*     (245)  |11111111|11111111|11111101|000    */    { {  0x7ffffe8 << (32 - 27), 27}, (char)245 },
    /*     (246)  |11111111|11111111|11111101|001    */    { {  0x7ffffe9 << (32 - 27), 27}, (char)246 },
    /*     (247)  |11111111|11111111|11111101|010    */    { {  0x7ffffea << (32 - 27), 27}, (char)247 },
    /*     (248)  |11111111|11111111|11111101|011    */    { {  0x7ffffeb << (32 - 27), 27}, (char)248 },
    /*     (249)  |11111111|11111111|11111111|1110   */    { {  0xffffffe << (32 - 28), 28}, (char)249 },
    /*     (250)  |11111111|11111111|11111101|100    */    { {  0x7ffffec << (32 - 27), 27}, (char)250 },
    /*     (251)  |11111111|11111111|11111101|101    */    { {  0x7ffffed << (32 - 27), 27}, (char)251 },
    /*     (252)  |11111111|11111111|11111101|110    */    { {  0x7ffffee << (32 - 27), 27}, (char)252 },
    /*     (253)  |11111111|11111111|11111101|111    */    { {  0x7ffffef << (32 - 27), 27}, (char)253 },
    /*     (254)  |11111111|11111111|11111110|000    */    { {  0x7fffff0 << (32 - 27), 27}, (char)254 },
    /*     (255)  |11111111|11111111|11111011|10     */    { {  0x3ffffee << (32 - 26), 26}, (char)255 }};
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    const huffman_tree huffman_code_tree2{
      /*     (  0)  |11111111|11000                    */    { {     0x1ff8u << (32 - 13), 13}, (char)  0 },
      /*     (  1)  |11111111|11111111|1011000         */    { {   0x7fffd8u << (32 - 23), 23}, (char)  1 },
      /*     (  2)  |11111111|11111111|11111110|0010   */    { {  0xfffffe2u << (32 - 28), 28}, (char)  2 },
      /*     (  3)  |11111111|11111111|11111110|0011   */    { {  0xfffffe3u << (32 - 28), 28}, (char)  3 },
      /*     (  4)  |11111111|11111111|11111110|0100   */    { {  0xfffffe4u << (32 - 28), 28}, (char)  4 },
      /*     (  5)  |11111111|11111111|11111110|0101   */    { {  0xfffffe5u << (32 - 28), 28}, (char)  5 },
      /*     (  6)  |11111111|11111111|11111110|0110   */    { {  0xfffffe6u << (32 - 28), 28}, (char)  6 },
      /*     (  7)  |11111111|11111111|11111110|0111   */    { {  0xfffffe7u << (32 - 28), 28}, (char)  7 },
      /*     (  8)  |11111111|11111111|11111110|1000   */    { {  0xfffffe8u << (32 - 28), 28}, (char)  8 },
      /*     (  9)  |11111111|11111111|11101010        */    { {   0xffffeau << (32 - 24), 24}, (char)  9 },
      /*     ( 10)  |11111111|11111111|11111111|111100 */    { { 0x3ffffffcu << (32 - 30), 30}, (char) 10 },
      /*     ( 11)  |11111111|11111111|11111110|1001   */    { {  0xfffffe9u << (32 - 28), 28}, (char) 11 },
      /*     ( 12)  |11111111|11111111|11111110|1010   */    { {  0xfffffeau << (32 - 28), 28}, (char) 12 },
      /*     ( 13)  |11111111|11111111|11111111|111101 */    { { 0x3ffffffdu << (32 - 30), 30}, (char) 13 },
      /*     ( 14)  |11111111|11111111|11111110|1011   */    { {  0xfffffebu << (32 - 28), 28}, (char) 14 },
      /*     ( 15)  |11111111|11111111|11111110|1100   */    { {  0xfffffecu << (32 - 28), 28}, (char) 15 },
      /*     ( 16)  |11111111|11111111|11111110|1101   */    { {  0xfffffedu << (32 - 28), 28}, (char) 16 },
      /*     ( 17)  |11111111|11111111|11111110|1110   */    { {  0xfffffeeu << (32 - 28), 28}, (char) 17 },
      /*     ( 18)  |11111111|11111111|11111110|1111   */    { {  0xfffffefu << (32 - 28), 28}, (char) 18 },
      /*     ( 19)  |11111111|11111111|11111111|0000   */    { {  0xffffff0u << (32 - 28), 28}, (char) 19 },
      /*     ( 20)  |11111111|11111111|11111111|0001   */    { {  0xffffff1u << (32 - 28), 28}, (char) 20 },
      /*     ( 21)  |11111111|11111111|11111111|0010   */    { {  0xffffff2u << (32 - 28), 28}, (char) 21 },
      /*     ( 22)  |11111111|11111111|11111111|111110 */    { { 0x3ffffffeu << (32 - 30), 30}, (char) 22 },
      /*     ( 23)  |11111111|11111111|11111111|0011   */    { {  0xffffff3u << (32 - 28), 28}, (char) 23 },
      /*     ( 24)  |11111111|11111111|11111111|0100   */    { {  0xffffff4u << (32 - 28), 28}, (char) 24 },
      /*     ( 25)  |11111111|11111111|11111111|0101   */    { {  0xffffff5u << (32 - 28), 28}, (char) 25 },
      /*     ( 26)  |11111111|11111111|11111111|0110   */    { {  0xffffff6u << (32 - 28), 28}, (char) 26 },
      /*     ( 27)  |11111111|11111111|11111111|0111   */    { {  0xffffff7u << (32 - 28), 28}, (char) 27 },
      /*     ( 28)  |11111111|11111111|11111111|1000   */    { {  0xffffff8u << (32 - 28), 28}, (char) 28 },
      /*     ( 29)  |11111111|11111111|11111111|1001   */    { {  0xffffff9u << (32 - 28), 28}, (char) 29 },
      /*     ( 30)  |11111111|11111111|11111111|1010   */    { {  0xffffffau << (32 - 28), 28}, (char) 30 },
      /*     ( 31)  |11111111|11111111|11111111|1011   */    { {  0xffffffbu << (32 - 28), 28}, (char) 31 },
      /* ' ' ( 32)  |010100                            */    { {       0x14u << (32 -  6),  6}, (char) 32 },
      /* '!' ( 33)  |11111110|00                       */    { {      0x3f8u << (32 - 10), 10}, (char) 33 },
      /* '"' ( 34)  |11111110|01                       */    { {      0x3f9u << (32 - 10), 10}, (char) 34 },
      /* '#' ( 35)  |11111111|1010                     */    { {      0xffau << (32 - 12), 12}, (char) 35 },
      /* '$' ( 36)  |11111111|11001                    */    { {     0x1ff9u << (32 - 13), 13}, (char) 36 },
      /* '%' ( 37)  |010101                            */    { {       0x15u << (32 -  6),  6}, (char) 37 },
      /* '&' ( 38)  |11111000                          */    { {       0xf8u << (32 -  8),  8}, (char) 38 },
      /* ''' ( 39)  |11111111|010                      */    { {      0x7fau << (32 - 11), 11}, (char) 39 },
      /* '(' ( 40)  |11111110|10                       */    { {      0x3fau << (32 - 10), 10}, (char) 40 },
      /* ')' ( 41)  |11111110|11                       */    { {      0x3fbu << (32 - 10), 10}, (char) 41 },
      /* '*' ( 42)  |11111001                          */    { {       0xf9u << (32 -  8),  8}, (char) 42 },
      /* '+' ( 43)  |11111111|011                      */    { {      0x7fbu << (32 - 11), 11}, (char) 43 },
      /* ',' ( 44)  |11111010                          */    { {       0xfau << (32 -  8),  8}, (char) 44 },
      /* '-' ( 45)  |010110                            */    { {       0x16u << (32 -  6),  6}, (char) 45 },
      /* '.' ( 46)  |010111                            */    { {       0x17u << (32 -  6),  6}, (char) 46 },
      /* '/' ( 47)  |011000                            */    { {       0x18u << (32 -  6),  6}, (char) 47 },
      /* '0' ( 48)  |00000                             */    { {        0x0u << (32 -  5),  5}, (char) 48 },
      /* '1' ( 49)  |00001                             */    { {        0x1u << (32 -  5),  5}, (char) 49 },
      /* '2' ( 50)  |00010                             */    { {        0x2u << (32 -  5),  5}, (char) 50 },
      /* '3' ( 51)  |011001                            */    { {       0x19u << (32 -  6),  6}, (char) 51 },
      /* '4' ( 52)  |011010                            */    { {       0x1au << (32 -  6),  6}, (char) 52 },
      /* '5' ( 53)  |011011                            */    { {       0x1bu << (32 -  6),  6}, (char) 53 },
      /* '6' ( 54)  |011100                            */    { {       0x1cu << (32 -  6),  6}, (char) 54 },
      /* '7' ( 55)  |011101                            */    { {       0x1du << (32 -  6),  6}, (char) 55 },
      /* '8' ( 56)  |011110                            */    { {       0x1eu << (32 -  6),  6}, (char) 56 },
      /* '9' ( 57)  |011111                            */    { {       0x1fu << (32 -  6),  6}, (char) 57 },
      /* ':' ( 58)  |1011100                           */    { {       0x5cu << (32 -  7),  7}, (char) 58 },
      /* ';' ( 59)  |11111011                          */    { {       0xfbu << (32 -  8),  8}, (char) 59 },
      /* '<' ( 60)  |11111111|1111100                  */    { {     0x7ffcu << (32 - 15), 15}, (char) 60 },
      /* '=' ( 61)  |100000                            */    { {       0x20u << (32 -  6),  6}, (char) 61 },
      /* '>' ( 62)  |11111111|1011                     */    { {      0xffbu << (32 - 12), 12}, (char) 62 },
      /* '?' ( 63)  |11111111|00                       */    { {      0x3fcu << (32 - 10), 10}, (char) 63 },
      /* '@' ( 64)  |11111111|11010                    */    { {     0x1ffau << (32 - 13), 13}, (char) 64 },
      /* 'A' ( 65)  |100001                            */    { {       0x21u << (32 -  6),  6}, (char) 65 },
      /* 'B' ( 66)  |1011101                           */    { {       0x5du << (32 -  7),  7}, (char) 66 },
      /* 'C' ( 67)  |1011110                           */    { {       0x5eu << (32 -  7),  7}, (char) 67 },
      /* 'D' ( 68)  |1011111                           */    { {       0x5fu << (32 -  7),  7}, (char) 68 },
      /* 'E' ( 69)  |1100000                           */    { {       0x60u << (32 -  7),  7}, (char) 69 },
      /* 'F' ( 70)  |1100001                           */    { {       0x61u << (32 -  7),  7}, (char) 70 },
      /* 'G' ( 71)  |1100010                           */    { {       0x62u << (32 -  7),  7}, (char) 71 },
      /* 'H' ( 72)  |1100011                           */    { {       0x63u << (32 -  7),  7}, (char) 72 },
      /* 'I' ( 73)  |1100100                           */    { {       0x64u << (32 -  7),  7}, (char) 73 },
      /* 'J' ( 74)  |1100101                           */    { {       0x65u << (32 -  7),  7}, (char) 74 },
      /* 'K' ( 75)  |1100110                           */    { {       0x66u << (32 -  7),  7}, (char) 75 },
      /* 'L' ( 76)  |1100111                           */    { {       0x67u << (32 -  7),  7}, (char) 76 },
      /* 'M' ( 77)  |1101000                           */    { {       0x68u << (32 -  7),  7}, (char) 77 },
      /* 'N' ( 78)  |1101001                           */    { {       0x69u << (32 -  7),  7}, (char) 78 },
      /* 'O' ( 79)  |1101010                           */    { {       0x6au << (32 -  7),  7}, (char) 79 },
      /* 'P' ( 80)  |1101011                           */    { {       0x6bu << (32 -  7),  7}, (char) 80 },
      /* 'Q' ( 81)  |1101100                           */    { {       0x6cu << (32 -  7),  7}, (char) 81 },
      /* 'R' ( 82)  |1101101                           */    { {       0x6du << (32 -  7),  7}, (char) 82 },
      /* 'S' ( 83)  |1101110                           */    { {       0x6eu << (32 -  7),  7}, (char) 83 },
      /* 'T' ( 84)  |1101111                           */    { {       0x6fu << (32 -  7),  7}, (char) 84 },
      /* 'U' ( 85)  |1110000                           */    { {       0x70u << (32 -  7),  7}, (char) 85 },
      /* 'V' ( 86)  |1110001                           */    { {       0x71u << (32 -  7),  7}, (char) 86 },
      /* 'W' ( 87)  |1110010                           */    { {       0x72u << (32 -  7),  7}, (char) 87 },
      /* 'X' ( 88)  |11111100                          */    { {       0xfcu << (32 -  8),  8}, (char) 88 },
      /* 'Y' ( 89)  |1110011                           */    { {       0x73u << (32 -  7),  7}, (char) 89 },
      /* 'Z' ( 90)  |11111101                          */    { {       0xfdu << (32 -  8),  8}, (char) 90 },
      /* '[' ( 91)  |11111111|11011                    */    { {     0x1ffbu << (32 - 13), 13}, (char) 91 },
      /* '\' ( 92)  |11111111|11111110|000             */    { {    0x7fff0u << (32 - 19), 19}, (char) 92 },
      /* ']' ( 93)  |11111111|11100                    */    { {     0x1ffcu << (32 - 13), 13}, (char) 93 },
      /* '^' ( 94)  |11111111|111100                   */    { {     0x3ffcu << (32 - 14), 14}, (char) 94 },
      /* '_' ( 95)  |100010                            */    { {       0x22u << (32 -  6),  6}, (char) 95 },
      /* '`' ( 96)  |11111111|1111101                  */    { {     0x7ffdu << (32 - 15), 15}, (char) 96 },
      /* 'a' ( 97)  |00011                             */    { {        0x3u << (32 -  5),  5}, (char) 97 },
      /* 'b' ( 98)  |100011                            */    { {       0x23u << (32 -  6),  6}, (char) 98 },
      /* 'c' ( 99)  |00100                             */    { {        0x4u << (32 -  5),  5}, (char) 99 },
      /* 'd' (100)  |100100                            */    { {       0x24u << (32 -  6),  6}, (char)100 },
      /* 'e' (101)  |00101                             */    { {        0x5u << (32 -  5),  5}, (char)101 },
      /* 'f' (102)  |100101                            */    { {       0x25u << (32 -  6),  6}, (char)102 },
      /* 'g' (103)  |100110                            */    { {       0x26u << (32 -  6),  6}, (char)103 },
      /* 'h' (104)  |100111                            */    { {       0x27u << (32 -  6),  6}, (char)104 },
      /* 'i' (105)  |00110                             */    { {        0x6u << (32 -  5),  5}, (char)105 },
      /* 'j' (106)  |1110100                           */    { {       0x74u << (32 -  7),  7}, (char)106 },
      /* 'k' (107)  |1110101                           */    { {       0x75u << (32 -  7),  7}, (char)107 },
      /* 'l' (108)  |101000                            */    { {       0x28u << (32 -  6),  6}, (char)108 },
      /* 'm' (109)  |101001                            */    { {       0x29u << (32 -  6),  6}, (char)109 },
      /* 'n' (110)  |101010                            */    { {       0x2au << (32 -  6),  6}, (char)110 },
      /* 'o' (111)  |00111                             */    { {        0x7u << (32 -  5),  5}, (char)111 },
      /* 'p' (112)  |101011                            */    { {       0x2bu << (32 -  6),  6}, (char)112 },
      /* 'q' (113)  |1110110                           */    { {       0x76u << (32 -  7),  7}, (char)113 },
      /* 'r' (114)  |101100                            */    { {       0x2cu << (32 -  6),  6}, (char)114 },
      /* 's' (115)  |01000                             */    { {        0x8u << (32 -  5),  5}, (char)115 },
      /* 't' (116)  |01001                             */    { {        0x9u << (32 -  5),  5}, (char)116 },
      /* 'u' (117)  |101101                            */    { {       0x2du << (32 -  6),  6}, (char)117 },
      /* 'v' (118)  |1110111                           */    { {       0x77u << (32 -  7),  7}, (char)118 },
      /* 'w' (119)  |1111000                           */    { {       0x78u << (32 -  7),  7}, (char)119 },
      /* 'x' (120)  |1111001                           */    { {       0x79u << (32 -  7),  7}, (char)120 },
      /* 'y' (121)  |1111010                           */    { {       0x7au << (32 -  7),  7}, (char)121 },
      /* 'z' (122)  |1111011                           */    { {       0x7bu << (32 -  7),  7}, (char)122 },
      /* '{' (123)  |11111111|1111110                  */    { {     0x7ffeu << (32 - 15), 15}, (char)123 },
      /* '|' (124)  |11111111|100                      */    { {      0x7fcu << (32 - 11), 11}, (char)124 },
      /* '}' (125)  |11111111|111101                   */    { {     0x3ffdu << (32 - 14), 14}, (char)125 },
      /* '~' (126)  |11111111|11101                    */    { {     0x1ffdu << (32 - 13), 13}, (char)126 },
      /*     (127)  |11111111|11111111|11111111|1100   */    { {  0xffffffcu << (32 - 28), 28}, (char)127 },
      /*     (128)  |11111111|11111110|0110            */    { {    0xfffe6u << (32 - 20), 20}, (char)128 },
      /*     (129)  |11111111|11111111|010010          */    { {   0x3fffd2u << (32 - 22), 22}, (char)129 },
      /*     (130)  |11111111|11111110|0111            */    { {    0xfffe7u << (32 - 20), 20}, (char)130 },
      /*     (131)  |11111111|11111110|1000            */    { {    0xfffe8u << (32 - 20), 20}, (char)131 },
      /*     (132)  |11111111|11111111|010011          */    { {   0x3fffd3u << (32 - 22), 22}, (char)132 },
      /*     (133)  |11111111|11111111|010100          */    { {   0x3fffd4u << (32 - 22), 22}, (char)133 },
      /*     (134)  |11111111|11111111|010101          */    { {   0x3fffd5u << (32 - 22), 22}, (char)134 },
      /*     (135)  |11111111|11111111|1011001         */    { {   0x7fffd9u << (32 - 23), 23}, (char)135 },
      /*     (136)  |11111111|11111111|010110          */    { {   0x3fffd6u << (32 - 22), 22}, (char)136 },
      /*     (137)  |11111111|11111111|1011010         */    { {   0x7fffdau << (32 - 23), 23}, (char)137 },
      /*     (138)  |11111111|11111111|1011011         */    { {   0x7fffdbu << (32 - 23), 23}, (char)138 },
      /*     (139)  |11111111|11111111|1011100         */    { {   0x7fffdcu << (32 - 23), 23}, (char)139 },
      /*     (140)  |11111111|11111111|1011101         */    { {   0x7fffddu << (32 - 23), 23}, (char)140 },
      /*     (141)  |11111111|11111111|1011110         */    { {   0x7fffdeu << (32 - 23), 23}, (char)141 },
      /*     (142)  |11111111|11111111|11101011        */    { {   0xffffebu << (32 - 24), 24}, (char)142 },
      /*     (143)  |11111111|11111111|1011111         */    { {   0x7fffdfu << (32 - 23), 23}, (char)143 },
      /*     (144)  |11111111|11111111|11101100        */    { {   0xffffecu << (32 - 24), 24}, (char)144 },
      /*     (145)  |11111111|11111111|11101101        */    { {   0xffffedu << (32 - 24), 24}, (char)145 },
      /*     (146)  |11111111|11111111|010111          */    { {   0x3fffd7u << (32 - 22), 22}, (char)146 },
      /*     (147)  |11111111|11111111|1100000         */    { {   0x7fffe0u << (32 - 23), 23}, (char)147 },
      /*     (148)  |11111111|11111111|11101110        */    { {   0xffffeeu << (32 - 24), 24}, (char)148 },
      /*     (149)  |11111111|11111111|1100001         */    { {   0x7fffe1u << (32 - 23), 23}, (char)149 },
      /*     (150)  |11111111|11111111|1100010         */    { {   0x7fffe2u << (32 - 23), 23}, (char)150 },
      /*     (151)  |11111111|11111111|1100011         */    { {   0x7fffe3u << (32 - 23), 23}, (char)151 },
      /*     (152)  |11111111|11111111|1100100         */    { {   0x7fffe4u << (32 - 23), 23}, (char)152 },
      /*     (153)  |11111111|11111110|11100           */    { {   0x1fffdcu << (32 - 21), 21}, (char)153 },
      /*     (154)  |11111111|11111111|011000          */    { {   0x3fffd8u << (32 - 22), 22}, (char)154 },
      /*     (155)  |11111111|11111111|1100101         */    { {   0x7fffe5u << (32 - 23), 23}, (char)155 },
      /*     (156)  |11111111|11111111|011001          */    { {   0x3fffd9u << (32 - 22), 22}, (char)156 },
      /*     (157)  |11111111|11111111|1100110         */    { {   0x7fffe6u << (32 - 23), 23}, (char)157 },
      /*     (158)  |11111111|11111111|1100111         */    { {   0x7fffe7u << (32 - 23), 23}, (char)158 },
      /*     (159)  |11111111|11111111|11101111        */    { {   0xffffefu << (32 - 24), 24}, (char)159 },
      /*     (160)  |11111111|11111111|011010          */    { {   0x3fffdau << (32 - 22), 22}, (char)160 },
      /*     (161)  |11111111|11111110|11101           */    { {   0x1fffddu << (32 - 21), 21}, (char)161 },
      /*     (162)  |11111111|11111110|1001            */    { {    0xfffe9u << (32 - 20), 20}, (char)162 },
      /*     (163)  |11111111|11111111|011011          */    { {   0x3fffdbu << (32 - 22), 22}, (char)163 },
      /*     (164)  |11111111|11111111|011100          */    { {   0x3fffdcu << (32 - 22), 22}, (char)164 },
      /*     (165)  |11111111|11111111|1101000         */    { {   0x7fffe8u << (32 - 23), 23}, (char)165 },
      /*     (166)  |11111111|11111111|1101001         */    { {   0x7fffe9u << (32 - 23), 23}, (char)166 },
      /*     (167)  |11111111|11111110|11110           */    { {   0x1fffdeu << (32 - 21), 21}, (char)167 },
      /*     (168)  |11111111|11111111|1101010         */    { {   0x7fffeau << (32 - 23), 23}, (char)168 },
      /*     (169)  |11111111|11111111|011101          */    { {   0x3fffddu << (32 - 22), 22}, (char)169 },
      /*     (170)  |11111111|11111111|011110          */    { {   0x3fffdeu << (32 - 22), 22}, (char)170 },
      /*     (171)  |11111111|11111111|11110000        */    { {   0xfffff0u << (32 - 24), 24}, (char)171 },
      /*     (172)  |11111111|11111110|11111           */    { {   0x1fffdfu << (32 - 21), 21}, (char)172 },
      /*     (173)  |11111111|11111111|011111          */    { {   0x3fffdfu << (32 - 22), 22}, (char)173 },
      /*     (174)  |11111111|11111111|1101011         */    { {   0x7fffebu << (32 - 23), 23}, (char)174 },
      /*     (175)  |11111111|11111111|1101100         */    { {   0x7fffecu << (32 - 23), 23}, (char)175 },
      /*     (176)  |11111111|11111111|00000           */    { {   0x1fffe0u << (32 - 21), 21}, (char)176 },
      /*     (177)  |11111111|11111111|00001           */    { {   0x1fffe1u << (32 - 21), 21}, (char)177 },
      /*     (178)  |11111111|11111111|100000          */    { {   0x3fffe0u << (32 - 22), 22}, (char)178 },
      /*     (179)  |11111111|11111111|00010           */    { {   0x1fffe2u << (32 - 21), 21}, (char)179 },
      /*     (180)  |11111111|11111111|1101101         */    { {   0x7fffedu << (32 - 23), 23}, (char)180 },
      /*     (181)  |11111111|11111111|100001          */    { {   0x3fffe1u << (32 - 22), 22}, (char)181 },
      /*     (182)  |11111111|11111111|1101110         */    { {   0x7fffeeu << (32 - 23), 23}, (char)182 },
      /*     (183)  |11111111|11111111|1101111         */    { {   0x7fffefu << (32 - 23), 23}, (char)183 },
      /*     (184)  |11111111|11111110|1010            */    { {    0xfffeau << (32 - 20), 20}, (char)184 },
      /*     (185)  |11111111|11111111|100010          */    { {   0x3fffe2u << (32 - 22), 22}, (char)185 },
      /*     (186)  |11111111|11111111|100011          */    { {   0x3fffe3u << (32 - 22), 22}, (char)186 },
      /*     (187)  |11111111|11111111|100100          */    { {   0x3fffe4u << (32 - 22), 22}, (char)187 },
      /*     (188)  |11111111|11111111|1110000         */    { {   0x7ffff0u << (32 - 23), 23}, (char)188 },
      /*     (189)  |11111111|11111111|100101          */    { {   0x3fffe5u << (32 - 22), 22}, (char)189 },
      /*     (190)  |11111111|11111111|100110          */    { {   0x3fffe6u << (32 - 22), 22}, (char)190 },
      /*     (191)  |11111111|11111111|1110001         */    { {   0x7ffff1u << (32 - 23), 23}, (char)191 },
      /*     (192)  |11111111|11111111|11111000|00     */    { {  0x3ffffe0u << (32 - 26), 26}, (char)192 },
      /*     (193)  |11111111|11111111|11111000|01     */    { {  0x3ffffe1u << (32 - 26), 26}, (char)193 },
      /*     (194)  |11111111|11111110|1011            */    { {    0xfffebu << (32 - 20), 20}, (char)194 },
      /*     (195)  |11111111|11111110|001             */    { {    0x7fff1u << (32 - 19), 19}, (char)195 },
      /*     (196)  |11111111|11111111|100111          */    { {   0x3fffe7u << (32 - 22), 22}, (char)196 },
      /*     (197)  |11111111|11111111|1110010         */    { {   0x7ffff2u << (32 - 23), 23}, (char)197 },
      /*     (198)  |11111111|11111111|101000          */    { {   0x3fffe8u << (32 - 22), 22}, (char)198 },
      /*     (199)  |11111111|11111111|11110110|0      */    { {  0x1ffffecu << (32 - 25), 25}, (char)199 },
      /*     (200)  |11111111|11111111|11111000|10     */    { {  0x3ffffe2u << (32 - 26), 26}, (char)200 },
      /*     (201)  |11111111|11111111|11111000|11     */    { {  0x3ffffe3u << (32 - 26), 26}, (char)201 },
      /*     (202)  |11111111|11111111|11111001|00     */    { {  0x3ffffe4u << (32 - 26), 26}, (char)202 },
      /*     (203)  |11111111|11111111|11111011|110    */    { {  0x7ffffdeu << (32 - 27), 27}, (char)203 },
      /*     (204)  |11111111|11111111|11111011|111    */    { {  0x7ffffdfu << (32 - 27), 27}, (char)204 },
      /*     (205)  |11111111|11111111|11111001|01     */    { {  0x3ffffe5u << (32 - 26), 26}, (char)205 },
      /*     (206)  |11111111|11111111|11110001        */    { {   0xfffff1u << (32 - 24), 24}, (char)206 },
      /*     (207)  |11111111|11111111|11110110|1      */    { {  0x1ffffedu << (32 - 25), 25}, (char)207 },
      /*     (208)  |11111111|11111110|010             */    { {    0x7fff2u << (32 - 19), 19}, (char)208 },
      /*     (209)  |11111111|11111111|00011           */    { {   0x1fffe3u << (32 - 21), 21}, (char)209 },
      /*     (210)  |11111111|11111111|11111001|10     */    { {  0x3ffffe6u << (32 - 26), 26}, (char)210 },
      /*     (211)  |11111111|11111111|11111100|000    */    { {  0x7ffffe0u << (32 - 27), 27}, (char)211 },
      /*     (212)  |11111111|11111111|11111100|001    */    { {  0x7ffffe1u << (32 - 27), 27}, (char)212 },
      /*     (213)  |11111111|11111111|11111001|11     */    { {  0x3ffffe7u << (32 - 26), 26}, (char)213 },
      /*     (214)  |11111111|11111111|11111100|010    */    { {  0x7ffffe2u << (32 - 27), 27}, (char)214 },
      /*     (215)  |11111111|11111111|11110010        */    { {   0xfffff2u << (32 - 24), 24}, (char)215 },
      /*     (216)  |11111111|11111111|00100           */    { {   0x1fffe4u << (32 - 21), 21}, (char)216 },
      /*     (217)  |11111111|11111111|00101           */    { {   0x1fffe5u << (32 - 21), 21}, (char)217 },
      /*     (218)  |11111111|11111111|11111010|00     */    { {  0x3ffffe8u << (32 - 26), 26}, (char)218 },
      /*     (219)  |11111111|11111111|11111010|01     */    { {  0x3ffffe9u << (32 - 26), 26}, (char)219 },
      /*     (220)  |11111111|11111111|11111111|1101   */    { {  0xffffffdu << (32 - 28), 28}, (char)220 },
      /*     (221)  |11111111|11111111|11111100|011    */    { {  0x7ffffe3u << (32 - 27), 27}, (char)221 },
      /*     (222)  |11111111|11111111|11111100|100    */    { {  0x7ffffe4u << (32 - 27), 27}, (char)222 },
      /*     (223)  |11111111|11111111|11111100|101    */    { {  0x7ffffe5u << (32 - 27), 27}, (char)223 },
      /*     (224)  |11111111|11111110|1100            */    { {    0xfffecu << (32 - 20), 20}, (char)224 },
      /*     (225)  |11111111|11111111|11110011        */    { {   0xfffff3u << (32 - 24), 24}, (char)225 },
      /*     (226)  |11111111|11111110|1101            */    { {    0xfffedu << (32 - 20), 20}, (char)226 },
      /*     (227)  |11111111|11111111|00110           */    { {   0x1fffe6u << (32 - 21), 21}, (char)227 },
      /*     (228)  |11111111|11111111|101001          */    { {   0x3fffe9u << (32 - 22), 22}, (char)228 },
      /*     (229)  |11111111|11111111|00111           */    { {   0x1fffe7u << (32 - 21), 21}, (char)229 },
      /*     (230)  |11111111|11111111|01000           */    { {   0x1fffe8u << (32 - 21), 21}, (char)230 },
      /*     (231)  |11111111|11111111|1110011         */    { {   0x7ffff3u << (32 - 23), 23}, (char)231 },
      /*     (232)  |11111111|11111111|101010          */    { {   0x3fffeau << (32 - 22), 22}, (char)232 },
      /*     (233)  |11111111|11111111|101011          */    { {   0x3fffebu << (32 - 22), 22}, (char)233 },
      /*     (234)  |11111111|11111111|11110111|0      */    { {  0x1ffffeeu << (32 - 25), 25}, (char)234 },
      /*     (235)  |11111111|11111111|11110111|1      */    { {  0x1ffffefu << (32 - 25), 25}, (char)235 },
      /*     (236)  |11111111|11111111|11110100        */    { {   0xfffff4u << (32 - 24), 24}, (char)236 },
      /*     (237)  |11111111|11111111|11110101        */    { {   0xfffff5u << (32 - 24), 24}, (char)237 },
      /*     (238)  |11111111|11111111|11111010|10     */    { {  0x3ffffeau << (32 - 26), 26}, (char)238 },
      /*     (239)  |11111111|11111111|1110100         */    { {   0x7ffff4u << (32 - 23), 23}, (char)239 },
      /*     (240)  |11111111|11111111|11111010|11     */    { {  0x3ffffebu << (32 - 26), 26}, (char)240 },
      /*     (241)  |11111111|11111111|11111100|110    */    { {  0x7ffffe6u << (32 - 27), 27}, (char)241 },
      /*     (242)  |11111111|11111111|11111011|00     */    { {  0x3ffffecu << (32 - 26), 26}, (char)242 },
      /*     (243)  |11111111|11111111|11111011|01     */    { {  0x3ffffedu << (32 - 26), 26}, (char)243 },
      /*     (244)  |11111111|11111111|11111100|111    */    { {  0x7ffffe7u << (32 - 27), 27}, (char)244 },
      /*     (245)  |11111111|11111111|11111101|000    */    { {  0x7ffffe8u << (32 - 27), 27}, (char)245 },
      /*     (246)  |11111111|11111111|11111101|001    */    { {  0x7ffffe9u << (32 - 27), 27}, (char)246 },
      /*     (247)  |11111111|11111111|11111101|010    */    { {  0x7ffffeau << (32 - 27), 27}, (char)247 },
      /*     (248)  |11111111|11111111|11111101|011    */    { {  0x7ffffebu << (32 - 27), 27}, (char)248 },
      /*     (249)  |11111111|11111111|11111111|1110   */    { {  0xffffffeu << (32 - 28), 28}, (char)249 },
      /*     (250)  |11111111|11111111|11111101|100    */    { {  0x7ffffecu << (32 - 27), 27}, (char)250 },
      /*     (251)  |11111111|11111111|11111101|101    */    { {  0x7ffffedu << (32 - 27), 27}, (char)251 },
      /*     (252)  |11111111|11111111|11111101|110    */    { {  0x7ffffeeu << (32 - 27), 27}, (char)252 },
      /*     (253)  |11111111|11111111|11111101|111    */    { {  0x7ffffefu << (32 - 27), 27}, (char)253 },
      /*     (254)  |11111111|11111111|11111110|000    */    { {  0x7fffff0u << (32 - 27), 27}, (char)254 },
      /*     (255)  |11111111|11111111|11111011|10     */    { {  0x3ffffeeu << (32 - 26), 26}, (char)255 }};
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    void context::table_evict()
    {
      this->current_dynamic_table_size_ -= (32 + this->dynamic_table_.back().first.size() + this->dynamic_table_.back().second.size());
      this->dynamic_table_.pop_back();
      assert(this->dynamic_table_.size() > 0 || this->current_dynamic_table_size_ == 0);
    }
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    void context::table_insert(const std::pair<std::string,std::string>& entry)
    {
      this->table_insert(std::pair<std::string,std::string>(entry));
    }
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    void context::table_insert(std::pair<std::string,std::string>&& entry)
    {
      std::size_t entry_size = 32 + entry.first.size() + entry.second.size();
      while ((entry_size + this->current_dynamic_table_size_) > this->max_dynamic_table_size_ && this->dynamic_table_.size() != 0)
        this->table_evict();

      // Entrys that are larger than max table size leave the table empty.
      if ((entry_size + this->current_dynamic_table_size_) <= this->max_dynamic_table_size_)
      {
        this->current_dynamic_table_size_ += entry_size;
        this->dynamic_table_.push_front(std::move(entry));
      }
    }
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    void encoder::encode_integer(prefix_mask prfx_mask, std::uint64_t input, std::string& output)
    {
      if (input < (std::uint8_t)prfx_mask)
      {
        output.back() |= ((std::uint8_t)prfx_mask & (std::uint8_t)input);
      }
      else
      {
        output.back() |= (std::uint8_t)prfx_mask;

        input = input - (std::uint8_t)prfx_mask;

        while (input >= 128)
        {
          output.push_back((std::uint8_t)(input % 128 + 128));
          input = input / 128;
        }

        output.push_back((std::uint8_t)input);
      }

    }
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    void encoder::huffman_encode(std::string::const_iterator begin, std::string::const_iterator end, std::string& output)
    {
//      std::uint8_t bits_avail_in_current_byte = 0;
//
//      for ( std::size_t current_index = output.size(); begin != end; ++begin)
//      {
//        std::size_t ascii_code = (std::size_t)*begin;
//        std::pair<std::uint32_t, std::uint8_t> huff_code_pair = huffman_code_array[ascii_code];
//        std::uint32_t msb_alligned = huff_code_pair.first << (32 - huff_code_pair.second);
//        std::size_t new_bytes_required = (huff_code_pair.second > bits_avail_in_current_byte ? (std::size_t)std::ceil(static_cast<float>(huff_code_pair.second - bits_avail_in_current_byte) / 8.0 ) : 0);
//        output.append(new_bytes_required, (char)0x0);
//
//        for (std::size_t i = 0; i + current_index < output.size(); ++i)
//        {
//          output[i] = output[i] | ((msb_alligned >> ((8 * (3 - i)) + (8 - bits_avail_in_current_byte))) & 0xFF);
//          std::cout << std::hex << (output[i + current_index] & 0xFF) << std::dec << std::endl;
//        }
//
//        if (new_bytes_required)
//          bits_avail_in_current_byte = (std::uint8_t)((huff_code_pair.second - bits_avail_in_current_byte) % 8);
//        else
//          bits_avail_in_current_byte -= huff_code_pair.second;
//
//        current_index = (bits_avail_in_current_byte == 0 ? output.size() : output.size() -1);
//      }
//
//      if (bits_avail_in_current_byte != 0)
//      {
//        output.back() = output.back() | (char)(0xFF >> (8 - bits_avail_in_current_byte));
//      }

    }
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    encoder::find_result encoder::find(const header_field& header_to_find)
    {
      find_result ret;
      auto static_table_find_range = static_table_reverse_lookup_map.equal_range(header_to_find.name);
      if (static_table_find_range.first != static_table_find_range.second)
      {
        ret.name_index = static_table_find_range.first->second;
        for( auto it = static_table_find_range.first; ret.name_and_value_index == 0 && it != static_table_find_range.second; ++it)
        {
          if (header_to_find.value == this->at(it->second).second)
          {
            ret.name_and_value_index = it->second;
          }
        }
      }

      if (ret.name_and_value_index == 0)
      {
        std::size_t current_index = static_table.size() + 1;
        for (auto it = this->dynamic_table_.begin(); ret.name_and_value_index == 0 && it != this->dynamic_table_.end(); ++it,++current_index)
        {
          if (it->first == header_to_find.name)
          {
            if (ret.name_index == 0)
            {
              ret.name_index = current_index;
            }

            if (it->second == header_to_find.value)
            {
              ret.name_and_value_index = current_index;
            }
          }
        }
      }

      return ret;
    };
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    void encoder::encode(const std::list<header_field>& headers, std::string& output)
    {
      // TODO: Estimate output size and reserve contiguous array in output container.

      while (this->table_size_updates_.size())
      {
        output.push_back((char)0x20);
        this->max_dynamic_table_size_ = this->table_size_updates_.front();
        encode_integer(prefix_mask::five_bit, this->max_dynamic_table_size_, output);
        while (this->current_dynamic_table_size_ > this->max_dynamic_table_size_)
          this->table_evict();

        this->table_size_updates_.pop();
      }

      for (std::list<header_field>::const_iterator header_itr= headers.begin(); header_itr != headers.end(); ++header_itr)
      {
        find_result res = this->find(*header_itr);

        if (res.name_and_value_index)
        {
          output.push_back((char)0x80);
          encode_integer(prefix_mask::seven_bit, res.name_and_value_index, output);
        }
        else
        {
          prefix_mask pfx_mask;
          if (header_itr->cache == cacheability::yes)
          {
            pfx_mask = prefix_mask::six_bit;
            output.push_back((char)0x40);
            this->table_insert(std::pair<std::string,std::string>(header_itr->name, header_itr->value));
          }
          else if (header_itr->cache == cacheability::never)
          {
            pfx_mask = prefix_mask::four_bit;
            output.push_back((char)0);
          }
          else
          {
            pfx_mask = prefix_mask::four_bit;
            output.push_back((char)0x10);
          }

          if (res.name_index)
          {
            encode_integer(pfx_mask, res.name_index, output);
          }
          else
          {
            output.push_back((char)0x0); // no huffman.
            encode_integer(prefix_mask::seven_bit, header_itr->name.size(), output);
            output += header_itr->name;
          }

          output.push_back((char)0x0); // no huffman.
          encode_integer(prefix_mask::seven_bit, header_itr->value.size(), output);
          output += header_itr->value;

        }
      }
    }
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    // TODO: Decide whether to deal with pos greather than input size.
    std::uint64_t decoder::decode_integer(prefix_mask prfx_mask, std::string::const_iterator& itr)
    {
      auto a = (std::uint8_t)*itr;
      std::uint64_t ret = (std::uint8_t)prfx_mask & *itr;
      if (ret == (std::uint8_t)prfx_mask)
      {
        std::uint64_t m = 0;

        do
        {
          ++itr;
          ret = ret + ((*itr & 127) * (std::uint64_t)std::pow(2,m));
          m = m + 7;
        }
        while ((*itr & 128) == 128);
      }
      ++itr;
      return ret;
    }
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    bool decoder::decode_string_literal(std::string::const_iterator& itr, std::string& output)
    {
      bool ret = true;
      bool huffman_encoded = (*itr & 0x80) != 0;
      std::size_t name_sz = decode_integer(prefix_mask::seven_bit, itr);
      if (huffman_encoded)
      {
        std::string tmp(itr, itr + name_sz);
        itr += name_sz;
        if (tmp.size() != name_sz)
          ret = false;
        else
          huffman_decode(tmp.begin(), tmp.end(), output);
      }
      else
      {
        output.assign(itr, itr + name_sz);
        itr += name_sz;
        if (output.size() != name_sz)
          ret = false;
      }
      return ret;
    }
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    bool decoder::decode_nvp(std::size_t table_index, cacheability cache_header, std::string::const_iterator& itr, std::list<header_field>& headers)
    {
      bool ret = true;
      std::string n;
      std::string v;

      if (table_index)
      {
        if (table_index <= this->header_list_length())
          n = this->at(table_index).first;
        else
          ret = false;
      }
      else
      {
        ret = this->decode_string_literal(itr, n);
      }

      if (ret)
      {
        ret = this->decode_string_literal(itr, v);
        if (ret)
        {
          if (cache_header == cacheability::yes)
            this->table_insert(std::pair<std::string,std::string>(n, v));
          headers.emplace_back(std::move(n), std::move(v), cache_header);
        }
      }

      return ret;
    }
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    void decoder::huffman_decode(std::string::const_iterator begin, std::string::const_iterator end, std::string& output)
    {
      std::uint8_t bit_pos = 7;
      while (begin != end)
      {
        char next;
        if (hpack::huffman_code_tree2.lookup(begin, end, bit_pos, next))
          output.push_back(next);
        else
          break;
      }
    }
    //----------------------------------------------------------------//

    //----------------------------------------------------------------//
    bool decoder::decode(std::string::const_iterator itr, std::string::const_iterator end, std::list<header_field>& headers)
    {
      bool ret = true;

      while (ret && itr != end)
      {
        if (*itr & 0x80)
        {
          // Indexed Header Field Representation
          //
          std::uint64_t table_index = decode_integer(prefix_mask::seven_bit, itr);
          if (table_index && table_index <= this->header_list_length())
          {
            const std::pair<std::string,std::string>& p = this->at(table_index);
            headers.emplace_back(p.first, p.second);
          }
          else
            ret = false;
        }
        else if ((*itr & 0xC0) == 0x40)
        {
          // Literal Header Field with Incremental Indexing
          //
          std::uint64_t table_index = decode_integer(prefix_mask::six_bit, itr);
          ret = this->decode_nvp(table_index, cacheability::yes, itr, headers);
        }
        else if ((*itr & 0xF0) == 0x0)
        {
          // Literal Header Field without Indexing
          //
          std::uint64_t table_index = decode_integer(prefix_mask::four_bit, itr);
          ret = this->decode_nvp(table_index, cacheability::no, itr, headers);
        }
        else if ((*itr & 0xF0) == 0x10)
        {
          // Literal Header Field never Indexed
          //
          std::uint64_t table_index = decode_integer(prefix_mask::four_bit, itr);
          ret = this->decode_nvp(table_index, cacheability::never, itr, headers);
        }
        else if ((*itr & 0xE0) == 0x20)
        {
          // Dynamic Table Size Update
          //
          std::uint64_t new_max_size = decode_integer(prefix_mask::five_bit, itr);
          this->max_dynamic_table_size_ = new_max_size;
          while (this->current_dynamic_table_size_ > this->max_dynamic_table_size_)
            this->table_evict();
        }
        else
        {
          ret = false;
        }
      }

      return ret;
    }
    //----------------------------------------------------------------//
  };
}